#!/bin/bash
#
# Session Switch Handler Daemon
# Watches for session switch requests and handles transitions
#

set -euo pipefail

# Configuration
TRIGGER_FILE="/var/run/session-switch-request"
STATE_FILE="/var/lib/session-state"
LOCK_FILE="/var/run/session-switch.lock"
DISPLAY_METHOD_FILE="/var/run/display-wake-method"
SDDM_CONF="/etc/sddm.conf.d/zz-steamos-autologin.conf"
LOG_TAG="session-switch-handler"

# Logging functions
log_info() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $@"
}

log_warning() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $@" >&2
}

log_error() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $@" >&2
}

# Initialize runtime files
mkdir -p /var/run /var/lib
touch "$TRIGGER_FILE"
chmod 666 "$TRIGGER_FILE"
echo -n "" > "$TRIGGER_FILE"

# Initialize state file
if [[ ! -f "$STATE_FILE" ]]; then
    if systemctl is-active --quiet kodi-gbm.service; then
        echo "kodi" > "$STATE_FILE"
    elif systemctl is-active --quiet sddm.service; then
        echo "gamemode" > "$STATE_FILE"
    else
        echo "unknown" > "$STATE_FILE"
    fi
fi
chmod 644 "$STATE_FILE"

log_info "Session switch handler started"

# Function: Wait for process to exit with timeout
wait_for_process_exit() {
    local process_pattern="$1"
    local timeout="${2:-30}"  # Default 300 iterations (3 seconds)
    local count=0

    while pgrep -f "$process_pattern" >/dev/null && [ $count -lt $timeout ]; do
        sleep 0.01
        ((count++))
    done

    # Return success if process is gone
    ! pgrep -f "$process_pattern" >/dev/null
}

# Function: Wait for process to start with timeout
wait_for_process_start() {
    local process_name="$1"
    local timeout="${2:-20}"  # Default 200 iterations (2 seconds)
    local count=0

    while ! pgrep -x "$process_name" >/dev/null && [ $count -lt $timeout ]; do
        sleep 0.01
        ((count++))
    done

    # Return success if process started
    pgrep -x "$process_name" >/dev/null
}

# Function: Smart display wake with learning
wake_display() {
    # Read last method used
    local last_method=$(cat "$DISPLAY_METHOD_FILE" 2>/dev/null || echo "none")
    local next_method=""
    
    # Determine next method to try
    case "$last_method" in
        "none"|"vt_switch")
            next_method="sysfs"
            ;;
        "sysfs")
            next_method="ddcutil"
            ;;
        "ddcutil")
            next_method="modetest"
            ;;
        "modetest")
            next_method="vt_switch"
            ;;
        *)
            next_method="sysfs"
            ;;
    esac
    
    log_info "Testing display wake method: $next_method"
    
    case "$next_method" in
        "sysfs")
            log_info "Method 1: sysfs direct write"
            local success=false
            local writable=false
            
            for dpms in /sys/class/drm/card*-*/dpms; do
                if [ -f "$dpms" ]; then
                    local status_file="${dpms%/dpms}/status"
                    local connector=$(basename $(dirname "$dpms"))
                    
                    # Check if file is writable
                    if [ -w "$dpms" ]; then
                        writable=true
                        if [ -f "$status_file" ] && [ "$(cat "$status_file")" = "connected" ]; then
                            log_info "  Trying $connector (writable)..."
                            if echo "On" > "$dpms" 2>/dev/null; then
                                log_info "  Success on $connector"
                                success=true
                            else
                                log_warning "  Write failed on $connector"
                            fi
                        fi
                    else
                        log_info "  $connector dpms is read-only ($(stat -c %a "$dpms"))"
                    fi
                fi
            done
            
            if [ "$writable" = false ]; then
                log_warning "  No writable DPMS sysfs files found - driver limitation"
            fi
            
            echo "sysfs" > "$DISPLAY_METHOD_FILE"
            [ "$success" = true ] && log_info "sysfs method completed successfully" || log_warning "sysfs method not available on this system"
            ;;
            
        "ddcutil")
            log_info "Method 2: ddcutil setvcp"
            if command -v ddcutil &>/dev/null; then
                # First detect displays
                log_info "  Detecting displays..."
                ddcutil detect --brief 2>&1 | tee /tmp/ddcutil-detect.log
                
                # VCP D6 is Power Mode: 01=On, 02=Standby, 03=Suspend, 04=Off, 05=Off(hard)
                log_info "  Setting VCP D6 (Power Mode) to 01 (On)"
                if ddcutil setvcp 0xD6 0x01 --verbose 2>&1 | tee /tmp/ddcutil-setvcp.log; then
                    log_info "  ddcutil succeeded"
                else
                    log_warning "  ddcutil failed (check /tmp/ddcutil-setvcp.log)"
                    # Try alternate syntax
                    log_info "  Trying alternate: ddcutil setvcp D6 1"
                    ddcutil setvcp D6 1 --verbose 2>&1 | tee -a /tmp/ddcutil-setvcp.log
                fi
            else
                log_warning "  ddcutil not found"
            fi
            echo "ddcutil" > "$DISPLAY_METHOD_FILE"
            ;;
            
        "modetest")
            log_info "Method 3: modetest DPMS property"
            if command -v modetest &>/dev/null; then
                # First show current state
                log_info "  Current display state:"
                modetest -c 2>&1 | grep -E "(^[0-9]+|DPMS:)" | tee /tmp/modetest-state.log
                
                # Get connector info
                local connector_info=$(modetest -c 2>/dev/null | grep "connected" | grep -v "disconnected" | head -1)
                if [ -n "$connector_info" ]; then
                    local connector_id=$(echo "$connector_info" | awk '{print $1}')
                    local connector_name=$(echo "$connector_info" | awk '{print $4}' | sed 's/[[:space:]]*$//')
                    log_info "  Found connector: $connector_name (ID: $connector_id)"
                    
                    # Try to set DPMS to On (0)
                    log_info "  Setting DPMS to 0 (On)"
                    if modetest -w "${connector_id}:DPMS:0" 2>&1 | tee /tmp/modetest-dpms.log; then
                        log_info "  modetest succeeded"
                    else
                        log_warning "  modetest failed (check /tmp/modetest-dpms.log)"
                        # Show available properties
                        log_info "  Available properties for connector $connector_id:"
                        modetest -c 2>&1 | grep -A20 "^${connector_id}\s" | grep -E "^\s+[0-9]+" | tee -a /tmp/modetest-dpms.log
                    fi
                else
                    log_warning "  No connected display found via modetest"
                fi
            else
                log_warning "  modetest not found"
            fi
            echo "modetest" > "$DISPLAY_METHOD_FILE"
            ;;
            
        "vt_switch")
            log_info "Method 4: VT switch"
            local current_vt=$(fgconsole 2>/dev/null || echo "1")
            log_info "  Current VT: $current_vt"
            log_info "  Switching to VT2..."
            if chvt 2 2>/dev/null; then
                sleep 0.2
                log_info "  Switching back to VT1..."
                chvt 1 2>/dev/null || log_warning "  chvt 1 failed"
                log_info "  VT switch completed"
            else
                log_warning "  chvt failed - permission issue?"
            fi
            echo "vt_switch" > "$DISPLAY_METHOD_FILE"
            ;;
    esac
    
    log_info "Next launch will test: $(cat "$DISPLAY_METHOD_FILE" 2>/dev/null || echo "unknown")"
}

# Function: Process cleanup
cleanup_processes() {
    local target="$1"

    case "$target" in
        kodi)
            # Try graceful termination
            pkill -TERM -f "kodi" 2>/dev/null || true
            # Short grace period
            sleep 0.2
            # Force kill if still running
            if pgrep -f "kodi" >/dev/null; then
                log_info "Force killing Kodi processes"
                pkill -KILL -f "kodi" 2>/dev/null || true
            fi
            ;;
        gaming)
            # Terminate Steam and Gamescope
            #pkill -TERM -f "steam" 2>/dev/null || true
            #pkill -TERM -f "gamescope" 2>/dev/null || true
            # Short grace period
            #sleep 0.2

            systemctl stop plugin_loader.service

            # Force kill if needed
            #if pgrep -f "steam|gamescope" >/dev/null; then
            #    log_info "Force killing gaming processes"
            #    pkill -KILL -f "steam" 2>/dev/null || true
                pkill -KILL -f "gamescope" 2>/dev/null || true
            #fi
            ;;
    esac
}

# Function: Switch to Kodi with retry logic
switch_to_kodi() {
    log_info "Switching to Kodi HDR mode..."

    # Quick check if already running
    if systemctl is-active --quiet kodi-gbm.service; then
        log_info "Already in Kodi mode"
        return 0
    fi

    # Stop SDDM if running
    if systemctl is-active --quiet sddm.service; then
        log_info "Stopping SDDM..."
        if ! systemctl stop sddm.service; then
            log_error "Failed to stop SDDM"
            return 1
        fi

        # Wait for gamescope to actually exit
        wait_for_process_exit "gamescope" 30 || {
            log_warning "Gamescope didn't exit cleanly, continuing anyway"
        }
    fi

    # Cleanup gaming processes
    cleanup_processes "gaming"

    # Ensure on TTY1
    chvt 1 2>/dev/null || true

    # Wake display before starting
    wake_display

    # Start Kodi
    if systemctl start kodi-gbm.service; then
        # Wait for Kodi to actually start
        if wait_for_process_start "kodi-gbm" 20; then
            echo "kodi" > "$STATE_FILE"
            #wake_display  # Wake again after start
            log_info "Successfully switched to Kodi"
            return 0
        else
            log_error "Kodi service started but process not found"
            systemctl stop kodi-gbm.service 2>/dev/null || true
        fi
    fi

    
    log_error "Failed to start Kodi, attempting recovery"

    # Recovery: Clear any stuck state and try once more
    systemctl reset-failed kodi-gbm.service 2>/dev/null || true
    pkill -KILL -f "kodi" 2>/dev/null || true
    sleep 0.5

    if systemctl start kodi-gbm.service; then
        if wait_for_process_start "kodi-gbm" 20; then
            echo "kodi" > "$STATE_FILE"
            wake_display
            log_info "Recovery successful - Kodi started"
            return 0
        fi
    fi

    log_error "Failed to start Kodi - recovery unsuccessful"
    echo "failed" > "$STATE_FILE"
    return 1
}

# Function: Switch to gaming mode with retry logic
switch_to_gamemode() {
    log_info "Switching to Gaming mode..."

    # Quick check if already running
    if systemctl is-active --quiet sddm.service; then
        log_info "Already in Gaming mode"
        return 0
    fi

    # Update SDDM config
    mkdir -p "$(dirname "$SDDM_CONF")"
    {
        echo "[Autologin]"
        echo "Session=gamescope-session.desktop"
    } > "$SDDM_CONF"

    # Stop Kodi if running
    if systemctl is-active --quiet kodi-gbm.service; then
        log_info "Stopping Kodi service..."
        systemctl stop kodi-gbm.service || true

        # Wait for Kodi to exit
        wait_for_process_exit "kodi-gbm" 20 || {
            log_warning "Kodi didn't exit cleanly, continuing anyway"
        }
    fi

    # Cleanup Kodi processes
    cleanup_processes "kodi"

    systemctl start plugin_loader.service
    sleep 0.1


    # Reset failed state
    systemctl reset-failed sddm.service 2>/dev/null || true

    if systemctl start sddm.service; then
        # Give SDDM a moment to initialize
        sleep 0.5

        if systemctl is-active --quiet sddm.service; then
            echo "gamemode" > "$STATE_FILE"
            log_info "Successfully switched to Gaming mode"
            return 0
        fi
    fi


    log_error "Failed to start SDDM, attempting recovery"

    # Kill any stuck processes
    pkill -KILL -f "sddm" 2>/dev/null || true
    sleep 0.5

    systemctl reset-failed sddm.service 2>/dev/null || true

    if systemctl start sddm.service; then
        echo "gamemode" > "$STATE_FILE"
        log_info "Recovery successful - SDDM started"
        return 0
    fi

    log_error "Failed to start SDDM - recovery unsuccessful"
    echo "failed" > "$STATE_FILE"
    return 1
}

# Main loop
log_info "Entering main loop, watching $TRIGGER_FILE"

while true; do
    # Wait for trigger file modification
    if inotifywait -e modify,create "$TRIGGER_FILE" 2>/dev/null; then
        # Lock to prevent concurrent switches
        exec 200>"$LOCK_FILE"
        if ! flock -n 200; then
            log_info "Another switch operation in progress, skipping..."
            continue
        fi

        # Read and clear the request
        REQUEST=$(cat "$TRIGGER_FILE" 2>/dev/null | tr -d '\n' | tr -d ' ')
        echo -n "" > "$TRIGGER_FILE"

        # Process the request
        case "$REQUEST" in
            "kodi")
                switch_to_kodi
                ;;
            "gamemode"|"gaming")
                switch_to_gamemode
                ;;
            "")
                # Empty request, ignore
                ;;
            *)
                log_error "Unknown request: $REQUEST"
                ;;
        esac

        # Release lock
        flock -u 200
    fi
done